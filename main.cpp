/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"

using std::string;
using boost::shared_ptr;
using std::vector;

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
}

MainFrame::~MainFrame()
{
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	Destroy();
}

void MainFrame::OnFileOpen(wxCommandEvent& event)
{
	wxFileDialog* openDialog = new wxFileDialog(
	this, _("Choose a file to open"), wxEmptyString, wxEmptyString, 
	_("XML Files (*.xml)|*.xml|All Files (*.*)|*"),
	wxFD_OPEN, wxDefaultPosition);
 
	// Creates a "open file" dialog with 4 file types
	if (openDialog->ShowModal() == wxID_OK) // if the user click "Open" instead of "Cancel"
	{
		wxString wxFilename = openDialog->GetPath();
		LoadFile(wxFilename);
	}
 
	// Clean up after ourselves
	openDialog->Destroy();
}

void MainFrame::LoadFile(const wxString& filename) {
	
	const string& fn = string(filename.mb_str());
	TiXmlDocument doc(fn);
	
	if (doc.LoadFile()) {
		
		TiXmlHandle hDoc(&doc);
		TiXmlElement* pElem;
		TiXmlElement* pRootNode;
		
		pRootNode = hDoc.FirstChildElement().Element();
		if (!pRootNode) {
			m_statusBar->SetStatusText(wxT("No root node"));
			return;
		}
	
		allMessages.clear();
		vector<wxString> uniqueList;
		
		for (pElem = pRootNode->FirstChildElement(); pElem != NULL; pElem = pElem->NextSiblingElement()) {
			
			const char *addr = pElem->Attribute("address");
			const char *sent = pElem->Attribute("human_readable_date");
			const char *body = pElem->Attribute("body");
						
			wxString wxsAddr(addr, wxConvUTF8);
			wxString wxsSentTime(sent, wxConvUTF8);
			wxString wxsMessageBody(body, wxConvUTF8);
			
			shared_ptr<SMSMessage> msg(new SMSMessage(wxsAddr, wxsSentTime, wxsMessageBody));
			allMessages.push_back(msg);
			
			const wxString& t = msg->GetSender();
		
			if (find(uniqueList.begin(), uniqueList.end(), t) == uniqueList.end()) {
				cboFilter->Insert(t, cboFilter->GetCount());
				uniqueList.push_back(t);
			}
			
		}

		UpdateFilters();
		
	} else {
		m_statusBar->SetStatusText(wxT("Failed to load") + filename);
	}
	
}

void MainFrame::UpdateFilters() {
	
	ClearAll();
	
	int selected = cboFilter->GetSelection();
	
	for (vector<shared_ptr<SMSMessage> >::const_iterator msg = allMessages.begin(); msg != allMessages.end(); msg++) {

		if (selected == -1 || allMessages[selected]->GetSender() == (*msg)->GetSender()) {
			AddSMSMessage(**msg);
		}

	}
	
}

void MainFrame::OnChangeFilter(wxCommandEvent& event) {
	UpdateFilters();
}
